#!/usr/bin/python
# Copyright 2017 Moritz Muehlenhoff
#                Filippo Giunchedi
#                Wikimedia Foundation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import json
import logging
import re
import sys
import time
import socket

from contextlib import closing
from prometheus_client import start_http_server, Summary
from prometheus_client.core import (CounterMetricFamily, GaugeMetricFamily,
                                    REGISTRY)

log = logging.getLogger(__name__)


class PrometheusNutcrackerCollector(object):
    scrape_duration = Summary(
            'nutcracker_scrape_duration_seconds', 'Nutcracker exporter scrape duration')

    def __init__(self, address, port):
        self.address = address
        self.port = port

    def _load_stats(self, host, port):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        with closing(sock):
            sock.connect((host, int(port)))
            sock.settimeout(1)
            raw_data = sock.recv(65536).decode('utf-8', errors='ignore')
            sock.shutdown(socket.SHUT_RDWR)

        # does not properly escape quotation marks in server aliases.
        # https://github.com/twitter/twemproxy/issues/532
        fixed_json = re.sub(r'"("[^"]+")"(?=:)', r'\1', raw_data.strip())
        return json.loads(fixed_json)

    def _pool_metrics(self, stats):
        metrics = {
            'client_eof': CounterMetricFamily('nutcracker_pool_client_eof',
                                              'EOF on client connections',
                                              labels=['pool']),
            'client_err': CounterMetricFamily('nutcracker_pool_client_err',
                                              'Errors on client connections',
                                              labels=['pool']),
            'client_connections': GaugeMetricFamily('nutcracker_pool_client_connections',
                                                      'Active client connections',
                                                      labels=['pool']),
            'server_ejects': CounterMetricFamily('nutcracker_pool_server_ejects',
                                                 'Times backend server was ejected',
                                                 labels=['pool']),
            'forward_error': CounterMetricFamily('nutcracker_pool_forward_error',
                                                 'Times we encountered a forwarding error',
                                                 labels=['pool']),
            'fragments': CounterMetricFamily('nutcracker_pool_fragments',
                                                 'Fragments created from a multi-vector request',
                                                 labels=['pool']),
        }

        for pool_name, pool_stats in stats.iteritems():
            if not isinstance(pool_stats, dict):
                continue
            for stat, value in pool_stats.iteritems():
                if isinstance(value, dict):
                    # XXX aggregate server stats
                    continue
                if stat not in metrics:
                    continue
                metrics[stat].add_metric([pool_name], value)

        for metric in metrics.values():
            yield metric


    @scrape_duration.time()
    def collect(self):
        stats = ''

        up = GaugeMetricFamily('nutcracker_up', 'Nutcracker is running')
        try:
            stats = self._load_stats(self.address, self.port)
            up.add_metric([], 1)
            yield up
        except socket.error as e:
            log.error('Could not fetch Nutcracker stats', e)
            up.add_metric([], 0)
            yield up
            return

        metrics = {
            'version': CounterMetricFamily('nutcracker_info', 'Version information', labels=['version']),
            'timestamp': CounterMetricFamily('nutcracker_start_time_seconds',
                                             'Timestamp of nutcracker startup'),
            'total_connections': CounterMetricFamily('nutcracker_total_connections',
                                                     'Total connections (client and server)'),
            'curr_connections': GaugeMetricFamily('nutcracker_curr_connections',
                                                  'Current active connections (client and server)'),
        }

        for name, family in metrics.iteritems():
            if name not in stats:
                continue

            if name == 'version':
                family.add_metric([stats.get(name)], 1)
            else:
                try:
                    family.add_metric([], float(stats.get(name)))
                except ValueError:
                    family.add_metric([], float('nan'))

        for metric in metrics.values():
            yield metric

        for metric in self._pool_metrics(stats):
            yield metric


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--listen', metavar='ADDRESS',
                        help='Listen on this address', default=':9191')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Enable debug logging')
    parser.add_argument('-s', '--stats', metavar='ADDRESS',
                        help='Fetch nutcracker stats from this address',
                        default=':22222')
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARNING)

    address, port = args.listen.split(':', 1)

    log.info('Starting nutcracker_exporter on %s:%s', address, port)

    stats_address, stats_port = args.stats.split(':', 1)
    REGISTRY.register(PrometheusNutcrackerCollector(stats_address, stats_port))
    start_http_server(int(port), addr=address)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        return 1


if __name__ == "__main__":
    sys.exit(main())
